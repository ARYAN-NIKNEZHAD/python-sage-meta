[tool.poetry]
name = "python-sage-meta"
version = "0.1.0"
description = "A python package for managing Meta GraphQL API."
authors = ["radin qahremani <radin@sageteam.org>"]
readme = "README.md"
license = "MIT"
keywords = ["python", "facebook-api", "facebook", "meta", "python-packages"]
repository = "https://github.com/sageteamorg/python-sage-meta"

classifiers=[
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Intended Audience :: Developers",
]

packages = [
    { include = "sage_meta" }
]

[tool.poetry.urls]
"Documentation" = "https://python-sage-meta.readthedocs.io/en/latest/"
"Source Code" = "https://github.com/sageteamorg/python-sage-meta"
"Issues" = "https://github.com/sageteamorg/python-sage-meta/issues"

[tool.poetry.dependencies]
python = ">=3.8,<4.0"
facebook-sdk = "^3.1.0"
requests = "^2.32.3"
python-dotenv = "^1.0.1"

[tool.poetry.group.dev.dependencies]
mypy = "^1.11.1"
pylint = "^3.2.6"
black = "^24.4.2"
sphinx = "^6.2.1"
sphinx-rtd-theme = "^2.0.0"
isort = "^5.13.2"
commitizen = "^3.28.0"
pre-commit = "^3.5.0"
pytest = "^8.3.2"
pytest-mock = "^3.14.0"
codecov = "^2.1.13"
bandit = {extras = ["toml"], version = "^1.7.9"}



[tool.pytest.ini_options]
addopts = "--cov --cov-report=term-missing --cov-report=html --cov-fail-under=90"
python_files = ["tests.py", "test_*.py"]
testpaths = ["tests"]
norecursedirs = [
    "node_modules",
    "env",
    "venv",
    ".venv",
    "dist",
    "build",
]

[tool.bandit]
targets = ["./sage_sms"]
exclude_dirs = [
    "tests",
    "migrations",
]
severity = "medium"
confidence = "medium"
max_lines = 500
progress = true
reports = true
output_format = "screen"
output_file = "bandit_report.txt"
include = ["B101", "B102"]
exclude_tests = ["B301", "B302"]

[tool.bandit.plugins]
B104 = { check_typed_list = true }

[tool.black]
line-length = 88
target-version = ['py38']
exclude = '''
/(
    \.git
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
    | docs
)/
'''

[tool.isort]
profile = "black"
line_length = 88
known_first_party = ["sage_imap"]
skip = ["docs"]

[tool.coverage.run]
omit = [
    "*/migrations/*",
    "kernel/*",
    "*/apps.py",
    "manage.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self\\.debug",
    "raise AssertionError",
    "if 0:",
    "if __name__ == .__main__.:"
]

[tool.commitizen]
name = "cz_conventional_commits"
version = "0.1.3"

[tool.commitizen.settings]
increment_types = ["feat", "fix"]

[tool.pylint]
ignore = ["CVS"]
ignore-patterns = ["test_.*.py"]

[tool.pylint.'messages control']
disable = [
    "C0114", # missing-module-docstring
    "C0115", # missing-class-docstring
    "C0116", # missing-function-docstring
    "R0903", # too-few-public-methods
    "W0703", # broad-except
]

[tool.pylint.reports]
output-format = "colorized"
reports = false

[tool.pylint.basic]
good-names = ["i", "j", "k", "ex", "Run", "_"]
max-line-length = 100

[tool.pylint.format]
max-line-length = 100

[tool.pylint.design]
max-attributes = 15

[tool.pylint.imports]
known-standard-library = ["logging", "requests", "facebook"]

[tool.mypy]
mypy_path = "stubs"
disallow_untyped_calls = true
disallow_untyped_defs = true
ignore_missing_imports = true
explicit_package_bases = true
exclude = '''
^docs/source/conf.py|
^build/|
^tests/|
^stubs/
'''

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
